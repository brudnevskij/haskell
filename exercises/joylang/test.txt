
[6 7] null -> [6 7] false
[] null drop2 -> [] false drop2 -> false


:one [dup null [false] [rest null] if ] def
:count [dup null [drop 0] [rest count 1 +] if] def
:appendE 
[swap dup null
[drop]
[swap [dup last] dip cons swap butlast swap appendE]
if
] def
:append 
[swap dup null 
[drop]
[swap [uncons] dip append cons]
if] 
def
:last [dup one [first][rest last] if] def
:swap[[] cons dip] def
:one [dup null [false] [rest null] if ] def
:map 
[swap dup null 
[swap drop]
[uncons [ swap dup] dip []cons cons [cons [] swap dip drop] dip i swap map cons]
if]
def
:butlast [dup one[drop []][dup first swap rest butlast cons ]if]def
:uncons [dup first swap rest] def
:filter [ swap dup null 
[swap drop]
[swap dup 
    [swap uncons 
	[dup [ 
	    swap cons
	    ] dip swap cons
	] dip
    ] dip filter swap dip swap [cons][swap drop]if
]
if] def
:qsort [dup null
[drop]
[dup uncons [[>] cons] dip swap filter [uncons swap dup [ [<] cons filter qsort]dip ] dip qsort ]
if
] def

:qeqsort
[dup null 
[[]]
[dup count dup != [][] if ]
if]
def

[1 3 5] qeqsort

